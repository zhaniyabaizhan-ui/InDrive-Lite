import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ChevronUp, ChevronDown, ChevronLeft, ChevronRight } from "lucide-react";

export default function FloatingPanel({ 
  children, 
  title,
  position = "bottom", // "bottom", "left", "right"
  defaultExpanded = false,
  className = ""
}) {
  const [isExpanded, setIsExpanded] = useState(defaultExpanded);

  const getPositionStyles = () => {
    switch(position) {
      case "left":
        return {
          position: "fixed",
          left: isExpanded ? "0" : "-320px",
          top: "80px",
          bottom: "20px",
          width: "360px",
          zIndex: 50
        };
      case "right":
        return {
          position: "fixed",
          right: isExpanded ? "0" : "-320px",
          top: "80px", 
          bottom: "20px",
          width: "360px",
          zIndex: 50
        };
      case "bottom":
      default:
        return {
          position: "fixed",
          left: "0",
          right: "0",
          bottom: isExpanded ? "0" : "-400px",
          height: isExpanded ? "60vh" : "120px",
          zIndex: 50
        };
    }
  };

  const getToggleButton = () => {
    const baseClasses = "absolute bg-white shadow-lg border rounded-full w-10 h-10 flex items-center justify-center hover:bg-gray-50 transition-colors";
    
    switch(position) {
      case "left":
        return (
          <Button
            variant="ghost"
            size="icon" 
            className={`${baseClasses} -right-5 top-4`}
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? <ChevronLeft className="w-5 h-5" /> : <ChevronRight className="w-5 h-5" />}
          </Button>
        );
      case "right":
        return (
          <Button
            variant="ghost"
            size="icon"
            className={`${baseClasses} -left-5 top-4`}
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? <ChevronRight className="w-5 h-5" /> : <ChevronLeft className="w-5 h-5" />}
          </Button>
        );
      case "bottom":
      default:
        return (
          <Button
            variant="ghost"
            size="icon"
            className={`${baseClasses} left-1/2 transform -translate-x-1/2 -top-5`}
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? <ChevronDown className="w-5 h-5" /> : <ChevronUp className="w-5 h-5" />}
          </Button>
        );
    }
  };

  return (
    <motion.div
      className={`bg-white rounded-t-2xl shadow-2xl ${position === 'bottom' ? 'rounded-t-2xl' : 'rounded-r-2xl'} ${className}`}
      style={getPositionStyles()}
      animate={getPositionStyles()}
      transition={{ type: "spring", damping: 25, stiffness: 200 }}
    >
      {getToggleButton()}
 