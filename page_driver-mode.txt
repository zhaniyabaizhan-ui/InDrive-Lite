import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { ArrowLeft, Activity, TrendingUp, Users, Clock, MoreVertical, Wifi, Settings } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { createPageUrl } from "@/utils";
import { DemandZone } from "@/entities/DemandZone";

import MapComponent from "../components/map/MapComponent";
import FloatingPanel from "../components/ui/FloatingPanel";

const DRIVER_LOCATION = {
  lat: 51.0900,
  lng: 71.4200
};

export default function DriverMode() {
  const [demandZones, setDemandZones] = useState([]);
  const [layerToggles, setLayerToggles] = useState({
    heatmap: true,
    events: true,
    ripening: true,
    micro_hotspot: true
  });

  useEffect(() => {
    loadDemandZones();
  }, []);

  const loadDemandZones = async () => {
    const zones = await DemandZone.list();
    setDemandZones(zones);
  };

  const toggleLayer = (layer) => {
    setLayerToggles(prev => ({
      ...prev,
      [layer]: !prev[layer]
    }));
  };

  const filteredZones = demandZones.filter(zone => layerToggles[zone.zone_type]);

  const topDemandZones = demandZones
    .filter(zone => zone.zone_type === 'heatmap')
    .sort((a, b) => b.request_count - a.request_count)
    .slice(0, 3);

  const calculateETA = (zone) => {
    const distance = getDistanceFromLatLonInKm(
      DRIVER_LOCATION.lat, 
      DRIVER_LOCATION.lng,
      zone.latitude,
      zone.longitude
    );
    return Math.round(distance / 30 * 60);
  };

  const getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {
    const R = 6371;
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  };

  const deg2rad = (deg) => deg * (Math.PI/180);

  const getDemandColor = (level) => {
    switch(level) {
      case "Very High": return "bg-red-500";
      case "High": return "bg-orange-500"; 
      case "Medium": return "bg-yellow-500";
      default: return "bg-green-500";
    }
  };

  const markers = [
    {
      lat: DRIVER_LOCATION.lat,
      lng: DRIVER_LOCATION.lng,
      popup: "Your current location"
    }
  ];

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm px-4 py-3 flex items-center gap-4 relative z-20">
        <Link to={createPageUrl("RoleSelection")}>
          <Button variant="ghost" size="icon">
            <ArrowLeft className="w-5 h-5" />
          </Button>
        </Link>
        <div className="flex-1">
          <h1 className="font-semibold text-gray-900">Driver Mode</h1>
          <p className="text-sm text-gray-500">EXPO District</p>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span className="text-sm text-green-600 font-medium">Online</span>
        </div>
      </div>

      {/* Map - Background Layer */}
      <div className="flex-1 relative" style={{ zIndex: 0 }}>
        <MapComponent
          center={[DRIVER_LOCATION.lat, DRIVER_LOCATION.lng]}
          markers={markers}
          demandZones={filteredZones}
          className="absolute inset-0"
        />

        {/* Layer Controls - Top Right */}
        <div className="absolute top-4 right-4" style={{ zIndex: 5 }}>
          <Card className="shadow-lg border border-gray-200">
            <CardHeader className="pb-2">
              <div className="flex items-center gap-2">
                <Settings className="w-4 h-4 text-gray-500" />
                <h3 className="font-semibold text-sm">Map Layers</h3>
              </div>
            </CardHeader>
            <CardContent className="pt-2 space-y-3">
              <div className="flex items-center justify-between">
                <label className="text-sm cursor-pointer flex items-center gap-1.5">
                  <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                  Heatmap
                </label>
                <Switch 
                  checked={layerToggles.heatmap}
                  onCheckedChange={() => toggleLayer('heatmap')}
                  className="data-[state=checked]:bg-green-500"
                />
              </div>
              
              <div className="flex items-center justify-between">
                <label className="text-sm cursor-pointer flex items-center gap-1.5">
                  <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
                  Events
                </label>
                <Switch 
                  checked={layerToggles.events}
                  onCheckedChange={() => toggleLayer('events')}
                  className="data-[state=checked]:bg-green-500"
                />
              </div>
              
              <div className="flex items-center justify-between">
                <label className="text-sm cursor-pointer flex items-center gap-1.5">
                  <div className="w-3 h-3 bg-purple-400 rounded-full"></div>
                  Ripening
                </label>
                <Switch 
                  checked={layerToggles.ripening}
                  onCheckedChange={() => toggleLayer('ripening')}
                  className="data-[state=checked]:bg-green-500"
                />
              </div>

              <div className="flex items-center justify-between">
                <label className="text-sm cursor-pointer flex items-center gap-1.5">
                  <Wifi className="w-3 h-3 text-orange-500" />
                  Hotspots
                </label>
                <Switch 
                  checked={layerToggles.micro_hotspot}
                  onCheckedChange={() => toggleLayer('micro_hotspot')}
                  className="data-[state=checked]:bg-green-500"
                />
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Left Floating Panel - Top Demand Zones */}
      <FloatingPanel title="Top Demand Zones Now" position="left" defaultExpanded={true}>
        <div className="space-y-6">
          {/* Stats Overview */}
          <div className="grid grid-cols-1 gap-4">
            <div className="text-center p-3 bg-green-50 rounded-xl border border-green-100">
              <div className="text-2xl font-bold text-green-600">
                {demandZones.filter(z => z.zone_type === 'heatmap').length}
              </div>
              <div className="text-sm text-gray-600">Active Zones</div>
            </div>
            
            <div className="text-center p-3 bg-orange-50 rounded-xl border border-orange-100">
              <div className="text-2xl font-bold text-orange-600">
                {demandZones.reduce((sum, z) => sum + (z.request_count || 0), 0)}
              </div>
              <div className="text-sm text-gray-600">Total Requests</div>
            </div>
            
            <div className="text-center p-3 bg-purple-50 rounded-xl border border-purple-100">
              <div className="text-2xl font-bold text-purple-600">
                {demandZones.filter(z => z.zone_type === 'ripening').length}
              </div>
              <div className="text-sm text-gray-600">Ripening</div>
            </div>
          </div>

          {/* Top Demand Zone Cards */}
          <div className="space-y-3">
            <h3 className="font-semibold text-gray-900">Highest Demand</h3>
            {topDemandZones.map((zone, index) => (
              <Card key={zone.id} className="hover:shadow-md transition-shadow border border-gray-200">
                <CardContent className="p-4">
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-green-600 rounded-full flex items-center justify-center">
                        <span className="text-white font-bold text-sm">{index + 1}</span>
                      </div>
                      <div className="flex-1">
                        <h4 className="font-semibold text-gray-900">{zone.name}</h4>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge 
                            className={`${getDemandColor(zone.demand_level)} text-white text-xs`}
                          >
                            {zone.demand_level}
                          </Badge>
                          <span className="text-sm text-gray-500">
                            {zone.request_count} requests
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between pt-2 border-t border-gray-100">
                      <div className="flex items-center gap-1 text-sm text-gray-600">
                        <Clock className="w-4 h-4" />
                        <span>{calculateETA(zone)} min away</span>
                      </div>
                      <Button 
                        size="sm" 
                        className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-sm"
                        onClick={() => alert(`Navigating to ${zone.name}...`)}
                      >
                        Go
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Live Events */}
          {demandZones.filter(z => z.zone_type === 'event').length > 0 && (
            <div className="space-y-3">
              <h3 className="font-semibold text-gray-900 flex items-center gap-2">
                <Activity className="w-5 h-5 text-orange-500" />
                Live Events
              </h3>
              
              {demandZones
                .filter(z => z.zone_type === 'event')
                .map((event) => (
                  <Card key={event.id} className="border border-orange-200">
                    <CardContent className="p-4">
                      <div className="space-y-2">
                        <h4 className="font-medium text-gray-900">{event.name}</h4>
                        <p className="text-sm text-gray-600">{event.event_time}</p>
                        <Badge className="bg-orange-100 text-orange-700 border border-orange-200">
                          {event.demand_level} demand expected
                        </Badge>
                      </div>
                    </CardContent>
                  </Card>
                ))}
            </div>
          )}

          {/* Ripening Zones */}
          {demandZones.filter(z => z.zone_type === 'ripening').length > 0 && (
            <div className="space-y-3">
              <h3 className="font-semibold text-gray-900 flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-purple-500" />
                Ripening Demand
              </h3>
              
              {demandZones
                .filter(z => z.zone_type === 'ripening')
                .map((zone) => (
                  <Card key={zone.id} className="border border-purple-200">
                    <CardContent className="p-4">
                      <div className="space-y-2">
                        <h4 className="font-medium text-gray-900">{zone.name}</h4>
                        <p className="text-sm text-gray-600">
                          Peak expected in {zone.ripening_in_minutes} minutes
                        </p>
                        <Badge className="bg-purple-100 text-purple-700 border border-purple-200">
                          Ripening
                        </Badge>
                      </div>
                    </CardContent>
                  </Card>
                ))}
            </div>
          )}
        </div>
      </FloatingPanel>
    </div>
  );
}