import React, { useState, useRef, useEffect } from "react";
import { motion, useAnimation, PanInfo } from "framer-motion";

const SHEET_STATES = {
  COLLAPSED: "collapsed",
  HALF: "half", 
  FULL: "full"
};

const SHEET_HEIGHTS = {
  collapsed: 120,
  half: "50vh",
  full: "90vh"
};

export default function BottomSheet({ 
  children, 
  initialState = SHEET_STATES.COLLAPSED,
  onStateChange 
}) {
  const [sheetState, setSheetState] = useState(initialState);
  const [isDragging, setIsDragging] = useState(false);
  const controls = useAnimation();
  const containerRef = useRef(null);

  useEffect(() => {
    controls.start({
      height: SHEET_HEIGHTS[sheetState],
      transition: { type: "spring", damping: 30, stiffness: 300 }
    });
    
    if (onStateChange) {
      onStateChange(sheetState);
    }
  }, [sheetState, controls, onStateChange]);

  const handleDrag = (event, info) => {
    setIsDragging(true);
  };

  const handleDragEnd = (event, info) => {
    setIsDragging(false);
    const velocity = info.velocity.y;
    const offset = info.offset.y;

    // Determine next state based on drag direction and velocity
    if (velocity > 500 || offset > 100) {
      // Dragging down
      if (sheetState === SHEET_STATES.FULL) {
        setSheetState(SHEET_STATES.HALF);
      } else if (sheetState === SHEET_STATES.HALF) {
        setSheetState(SHEET_STATES.COLLAPSED);
      }
    } else if (velocity < -500 || offset < -100) {
      // Dragging up
      if (sheetState === SHEET_STATES.COLLAPSED) {
        setSheetState(SHEET_STATES.HALF);
      } else if (sheetState === SHEET_STATES.HALF) {
        setSheetState(SHEET_STATES.FULL);
      }
    }
  };

  const expandToFull = () => setSheetState(SHEET_STATES.FULL);
  const collapseToHalf = () => setSheetState(SHEET_STATES.HALF);

  return (
    <motion.div
      ref={containerRef}
      className="fixed bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-2xl z-50 overflow-hidden"
      initial={{ height: SHEET_HEIGHTS[initialState] }}
      animate={controls}
      style={{
        boxShadow: "0 -4px 32px rgba(0, 0, 0, 0.1)"
      }}
    >
      {/* Drag handle */}
      <motion.div
        className="w-full py-4 cursor-grab active:cursor-grabbing"
        drag="y"
        dragConstraints={{ top: 0, bottom: 0 }}
        dragElastic={0.1}
        onDrag={handleDrag}
        onDragEnd={handleDragEnd}
      >
        <div className="w-12 h-1.5 bg-gray-300 rounded-full mx-auto"></div>
      </motion.div>

      {/* Content */}
      <div className="px-6 pb-6 h-full overflow-y-auto">
        {typeof children === 'function' ? 
          children({ expandToFull, collapseToHalf, sheetState }) : 
          children
        }
      </div>
    </motion.div>
  );
}